{
	"info": {
		"_postman_id": "5ef994b0-3e96-4b72-a598-a9ce484e5198",
		"name": "MISW-4411-API-Proyecto",
		"description": "# API Rest - Aplicaciones basadas en LLM\n\n**MISW-4411 API Proyecto** - Documentaci√≥n y Testing Inicial Completo\n\n## Descripci√≥n General\n\nEsta colecci√≥n implementa el API Rest base que van a utilizar en el proyecto del curso MISW4411 - Construcci√≥n de Aplicaciones basadas en LLMs. La estructura de esta API cuenta con 4 endpoints principales, incluyendo el monitoreo del estado del sistema. Estos endpoints est√°n previamente configurados para facilitar la creaci√≥n de su sistema inteligente. Cada semana, deber√° agregar las funcionalidades aprendidas a lo largo del curso con el objetivo de construir su proyecto final de manera iterativa. Los endpoints principales son:\n\n- üìÅ **Cargar documentos desde URL externa:** POST /api/v1/documents/load-from-url\n- **üîç** **Validar el estado de procesamiento de documentos:** GET /api/v1/documents/loadfrom-url/{processing_id}\n- **üí¨** **Realizar consultas al sistema:** POST /api/v1/ask\n- ‚úÖ **Verificaci√≥n de salud del sistema**: GET /api/v1/health\n    \n\nLos endpoints se clasifican en tres categor√≠as principales, la misma estructura que se usa en esta colecci√≥n de Postman. A trav√©s de ella, se eval√∫a el adecuado funcionamiento de las funcionalidades principales del sistema, presentadas a continuaci√≥n.\n\n## üöÄ Funcionalidades Principales\n\n### 1\\. **Health Check** üè•\n\n- Verificaci√≥n del estado del sistema\n- Monitoreo de disponibilidad\n- Validaci√≥n de conectividad\n    \n\n### 2\\. **Gesti√≥n de Documentos** üìÅ\n\n- Carga autom√°tica desde URLs de Google Drive\n- Procesamiento as√≠ncrono con seguimiento\n- Configuraci√≥n avanzada de chunking y embeddings\n- Validaci√≥n de estado y resultados\n    \n\n### 3\\. **Consultas** ü§ñ\n\n- Preguntas inteligentes sobre documentos cargados\n- Respuestas contextualizadas con fuentes\n- Configuraci√≥n de par√°metros de b√∫squeda\n- M√©tricas de performance y calidad\n    \n\n## üîß Configuraci√≥n de Variables en la colecci√≥n\n\n### Variables Principales:\n\n- `baseUrl`: URL base de la API (default: `http://localhost:8000`)\n- `processing_id`: ID de procesamiento (se establece autom√°ticamente)\n- `test_collection_name`: Nombre para colecciones de prueba\n- `test_source_url`: URL de Google Drive para testing\n- `max_response_time_ms`: Tiempo m√°ximo de answer aceptable\n    \n\n### ‚öôÔ∏è Configuraci√≥n Inicial Requerida:\n\n1. **Establecer** **`test_source_url`** con una URL v√°lida de Google Drive\n2. **Configurar API Key** de Google Drive en su servidor backend\n3. **Verificar conectividad** ejecutando Health Check\n    \n\n## üß™ Testing Automatizado\n\n### Ejecuci√≥n con Collection Runner:\n\n**Orden Recomendado:**\n\n1. `Health Check` ‚Üí Verificar disponibilidad\n2. `Cargar Documentos` ‚Üí Iniciar procesamiento\n3. `Validar Estado` ‚Üí Confirmar procesamiento\n4. `Realizar Pregunta` ‚Üí Probar consultas RAG\n    \n\n### Antes de Testing:\n\n- Configurar variables de colecci√≥n\n- Verificar estado del servidor\n- Revisar permisos de Google Drive\n    \n\n### Durante Testing:\n\n- Monitorear console logs\n- Permitir tiempo para procesamiento as√≠ncrono\n- Verificar variables capturadas\n    \n\n### Despu√©s de Testing:\n\n- Revisar Test Results\n- Analizar tiempos de answer\n- Documentar comportamientos inesperados\n    \n\n---\n\n**üîñ Versi√≥n API**: 1.0.0  \n**üìÖ √öltima actualizaci√≥n**: Octubre 2025  \n**üë• Mantenido por**: Equipo MISW-4411",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18573230",
		"_collection_link": "https://restless-star-769911.postman.co/workspace/e641b0f8-2aaf-40df-8501-319c34933bf1/collection/18573230-5ef994b0-3e96-4b72-a598-a9ce484e5198?action=share&source=collection_link&creator=18573230"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Verificar Estado del Sistema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('service');",
									"});",
									"",
									"pm.test(\"System is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						},
						"description": "Endpoint de verificaci√≥n de salud del sistema.\n\nEste endpoint permite verificar que la API est√© funcionando correctamente. Es una funci√≥n s√≠ncrona (no async) porque no requiere operaciones complejas.\n\n**Respuesta esperada:**\n- `status`: Siempre \"healthy\" si el API responde\n- `success`: Siempre true\n- `timestamp`: Momento exacto de la verificaci√≥n\n- `service`: Identificador del servicio (\"API\")"
					},
					"response": [
						{
							"name": "Sistema Saludable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"healthy\",\n    \"success\": true,\n    \"timestamp\": \"2025-09-04T21:49:42.008407\",\n    \"service\": \"API\"\n}"
						}
					]
				}
			],
			"description": "Endpoint para verificar el estado y salud del sistema"
		},
		{
			"name": "Gesti√≥n de Documentos",
			"item": [
				{
					"name": "Cargar Documentos desde URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has processing_id\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('processing_id');",
									"    pm.collectionVariables.set('processing_id', jsonData.processing_id);",
									"});",
									"",
									"pm.test(\"Response structure is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"source_url\": \"{{test_source_url}}\",\n    \"collection_name\": \"{{test_collection_name}}\",\n    \"chunking_config\": {\n        \"chunking_strategy\": \"recursive_character\",\n        \"chunk_size\": 1000,\n        \"chunk_overlap\": 200,\n        \"separators\": [\"\\\\n\", \"\\\\n\\\\n\", \" \", \"\"],\n        \"keep_separator\": true,\n        \"strip_whitespace\": true,\n        \"length_function\": \"character_count\"\n    },\n    \"processing_options\": {\n        \"file_extensions\": [\"pdf\", \"txt\", \"docx\"],\n        \"max_file_size_mb\": 50,\n        \"extract_metadata\": true,\n        \"preserve_formatting\": false,\n        \"timeout_per_file_seconds\": 300\n    },\n    \"embedding_config\": {\n        \"model\": \"text-embedding-ada-002\",\n        \"batch_size\": 100,\n        \"retry_attempts\": 3\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/load-from-url",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"load-from-url"
							]
						},
						"description": "Endpoint principal para carga de documentos desde URL externa.\n\nProcesa autom√°ticamente **TODOS** los documentos encontrados en la URL proporcionada de manera as√≠ncrona, aplicando configuraciones de chunking, embeddings y opciones de procesamiento.\n\n**‚ö†Ô∏è Configuraci√≥n requerida:**\n\n- Aseg√∫rese de configurar su llave de Google Drive en su backend antes de ejecutar\n    \n\n**Comportamiento autom√°tico:**\n\n- Si la URL apunta a una carpeta: descarga todos los documentos de la carpeta\n- Si la URL apunta a un archivo: descarga solo ese archivo\n- Maneja autom√°ticamente el conteo y procesamiento de documentos\n    \n\n**Flujo del endpoint:**\n\n1. Validaci√≥n de accesibilidad de URL\n2. Validaci√≥n de par√°metros\n3. Generaci√≥n de processing_id √∫nico\n4. Inicio de tarea as√≠ncrona en background\n5. Retorno inmediato con ID de seguimiento\n    \n\n**Par√°metros importantes:**\n\n- `source_url`: URL de Google Drive donde est√°n los documentos\n- `collection_name`: Nombre √∫nico para identificar esta colecci√≥n\n- `chunking_config`: Configuraci√≥n para dividir documentos en chunks\n- `processing_options`: Opciones adicionales de procesamiento\n- `embedding_config`: Configuraci√≥n del modelo de embeddings"
					},
					"response": [
						{
							"name": "Carga Iniciada Exitosamente",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"source_url\": \"https://drive.google.com/drive/folders/XXXXXX\",\n    \"collection_name\": \"test_collection\",\n    \"chunking_config\": {\n        \"chunking_strategy\": \"recursive_character\",\n        \"chunk_size\": 1000,\n        \"chunk_overlap\": 200\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/documents/load-from-url",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"documents",
										"load-from-url"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Procesamiento iniciado en background\",\n    \"processing_id\": \"proc_b8ae8dbda5f9\",\n    \"timestamp\": \"2025-09-04T21:49:42.008407\"\n}"
						},
						{
							"name": "Error - Par√°metros Inv√°lidos",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"source_url\": \"https://drive.google.com/drive/folders/XXXXXX\",\n    \"collection_name\": \"test_collection\",\n    \"chunking_config\": {\n        \"chunking_strategy\": \"recursive_character\",\n        \"chunk_size\": 1000,\n        \"chunk_overlap\": 1500\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/documents/load-from-url",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"documents",
										"load-from-url"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": {\n        \"code\": \"INVALID_REQUEST\",\n        \"message\": \"Par√°metros de request inv√°lidos\",\n        \"details\": {\n            \"field\": \"chunk_overlap\",\n            \"chunk_size\": 1000,\n            \"provided_value\": 1500,\n            \"reason\": \"El overlap del chunk debe ser mayor o igual a 0 y menor que el tama√±o del chunk\"\n        },\n        \"timestamp\": \"2025-09-04T21:49:42.008407\"\n    }\n}"
						},
						{
							"name": "Error - URL No Accesible",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"source_url\": \"https://drive.google.com/drive/folders/INVALID_URL\",\n    \"collection_name\": \"test_collection\",\n    \"chunking_config\": {\n        \"chunking_strategy\": \"recursive_character\",\n        \"chunk_size\": 1000,\n        \"chunk_overlap\": 200\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/documents/load-from-url",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"documents",
										"load-from-url"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": {\n        \"code\": \"SOURCE_URL_NOT_FOUND\",\n        \"message\": \"URL no encontrada\",\n        \"details\": {\n            \"field\": \"source_url\",\n            \"source_url\": \"https://drive.google.com/drive/folders/INVALID_URL\",\n            \"provided_value\": \"https://drive.google.com/drive/folders/INVALID_URL\",\n            \"reason\": \"La URL no es accesible\"\n        },\n        \"timestamp\": \"2025-09-04T21:49:42.008407\"\n    }\n}"
						}
					]
				},
				{
					"name": "Validar Estado de Carga",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test(\"Data contains processing information\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data;",
									"    pm.expect(data).to.have.property('processing_summary');",
									"    pm.expect(data).to.have.property('collection_info');",
									"    pm.expect(data).to.have.property('documents_processed');",
									"    pm.expect(data).to.have.property('processing_id');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/documents/load-from-url/{{processing_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"documents",
								"load-from-url",
								"{{processing_id}}"
							]
						},
						"description": "Endpoint para consultar el estado y resultados de un procesamiento.\n\nPermite verificar el progreso y obtener los resultados completos de un procesamiento de documentos iniciado con `load_from_url`.\n\n**Flujo del endpoint:**\n1. Validaci√≥n del processing_id\n2. Lectura as√≠ncrona del archivo de log\n3. Parseo y validaci√≥n del JSON\n4. Retorno de datos estructurados\n\n**Informaci√≥n retornada:**\n- **processing_summary**: Resumen de los pasos de procesamiento\n- **collection_info**: Informaci√≥n de la colecci√≥n (nombre, documentos encontrados/procesados/fallidos, chunks, etc.)\n- **documents_processed**: Lista detallada de documentos procesados exitosamente\n- **failed_documents**: Lista de documentos que fallaron en el procesamiento\n- **chunking_statistics**: Estad√≠sticas del proceso de chunking\n- **embedding_statistics**: Estad√≠sticas del proceso de embeddings\n- **warnings**: Advertencias generadas durante el procesamiento\n- **processing_id**: ID del procesamiento consultado\n- **timestamp**: Momento de finalizaci√≥n del procesamiento\n\n**C√≥digos de error posibles:**\n- `400`: processing_id vac√≠o\n- `404`: processing_id no existe\n- `422`: archivo JSON corrupto\n- `500`: errores de validaci√≥n o internos"
					},
					"response": [
						{
							"name": "Procesamiento Completado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/documents/load-from-url/proc_b8ae8dbda5f9",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"documents",
										"load-from-url",
										"proc_b8ae8dbda5f9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Documentos cargados y procesados exitosamente\",\n    \"data\": {\n        \"processing_summary\": {},\n        \"collection_info\": {\n            \"name\": \"test_collection\",\n            \"documents_found\": 2,\n            \"documents_processed_successfully\": 1,\n            \"documents_failed\": 1,\n            \"total_chunks_before\": 0,\n            \"total_chunks_after\": 15,\n            \"storage_size_mb\": 150\n        },\n        \"documents_processed\": [\n            {\n                \"filename\": \"Contrato.pdf\",\n                \"file_path\": \"./docs/test_collection/Contrato.pdf\",\n                \"file_size_bytes\": 41103871,\n                \"download_url\": \"https://drive.google.com/drive/folders/XXXXXX=drive_link/Contrato.pdf\",\n                \"processing_time_seconds\": 3.71,\n                \"doc_metadata\": {\n                    \"id\": \"1H-3WR5W3w8IFQ1J1pidjyiZ6ZDcHhDsm\",\n                    \"name\": \"Contrato.pdf\",\n                    \"mimeType\": \"application/pdf\",\n                    \"size\": \"41103871\"\n                }\n            }\n        ],\n        \"failed_documents\": [],\n        \"chunking_statistics\": {},\n        \"embedding_statistics\": {},\n        \"warnings\": [],\n        \"processing_id\": \"proc_b8ae8dbda5f9\",\n        \"timestamp\": \"2025-09-04T21:46:16.615548\"\n    }\n}"
						},
						{
							"name": "Error - Processing ID Vac√≠o",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/documents/load-from-url/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"documents",
										"load-from-url",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"El processing_id es requerido\"\n}"
						},
						{
							"name": "Error - Processing ID No Existe",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/documents/load-from-url/invalid_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"documents",
										"load-from-url",
										"invalid_id"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"El processing_id no existe\"\n}"
						}
					]
				}
			],
			"description": "Endpoints para la gesti√≥n y carga de documentos desde URLs externas"
		},
		{
			"name": "Consultas RAG",
			"item": [
				{
					"name": "Realizar Pregunta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('question');",
									"    pm.expect(jsonData).to.have.property('answer');",
									"    pm.expect(jsonData).to.have.property('collection');",
									"    pm.expect(jsonData).to.have.property('response_time_sec');",
									"    pm.expect(jsonData).to.have.property('final_query');",
									"    pm.expect(jsonData).to.have.property('query_rewriting_used');",
									"    pm.expect(jsonData).to.have.property('reranker_used');",
									"});",
									"",
									"pm.test(\"Response has context information\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('files_consulted');",
									"    pm.expect(jsonData).to.have.property('context_docs');",
									"    pm.expect(jsonData.files_consulted).to.be.an('array');",
									"    pm.expect(jsonData.context_docs).to.be.an('array');",
									"});",
									"",
									"pm.test(\"New API fields have correct types\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.final_query).to.be.a('string');",
									"    pm.expect(jsonData.query_rewriting_used).to.be.a('boolean');",
									"    pm.expect(jsonData.reranker_used).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response_time_sec).to.be.a('number');",
									"    pm.expect(jsonData.response_time_sec).to.be.below(60);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"question\": \"Crea un resumen del documento\",\n    \"top_k\": 5,\n    \"collection\": \"{{test_collection_name}}\",\n    \"force_rebuild\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/ask",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ask"
							]
						},
						"description": "Endpoint as√≠ncrono para realizar consultas al sistema RAG.\n\nEste endpoint permite a los usuarios hacer questions sobre documentos cargados en el sistema. Utiliza t√©cnicas de RAG para generar answers contextualizadas basadas en el contenido de los documentos disponibles.\n\n**¬øPor qu√© es as√≠ncrono este endpoint?**\n\n- Permite al servidor manejar m√∫ltiples consultas simult√°neamente\n- No bloquea otras peticiones mientras procesa documentos grandes\n- Mejora la experiencia del usuario en aplicaciones web\n- Facilita la escalabilidad del sistema\n    \n\n**Flujo de procesamiento:**\n\n1. **Validaci√≥n de entrada**: Verifica que la question no est√© vac√≠a\n2. **Inicializaci√≥n de estructura**: Crea la carpeta docs/ si no existe\n3. **Verificaci√≥n de colecciones**: Confirma que existen documentos cargados\n4. **Resoluci√≥n de colecci√≥n**: Asigna colecci√≥n por defecto si no se especifica\n5. **Validaci√≥n de colecci√≥n**: Verifica que la colecci√≥n solicitada existe\n6. **Procesamiento RAG**: Llama a la funci√≥n as√≠ncrona para generar answer\n7. **Manejo de errores**: Captura y maneja excepciones de manera elegante\n    \n\n**Par√°metros de entrada:**\n\n- `question` (requerido): La pregunta a realizar sobre los documentos\n- `top_k` (opcional, default=5): N√∫mero de documentos relevantes a considerar\n- `collection` (opcional): Nombre de la colecci√≥n espec√≠fica a consultar\n- `force_rebuild` (opcional, default=false): Reprocesa los documentos antes de responder\n- `use_reranking` (opcional, default=false): Utiliza Reranking. Debe permanecer en false hasta la semana 3, en la cual har√° la implementaci√≥n de esta funcionalidad.\n- `use_query_rewriting` (opcional, default=false): Utiliza Query Rewritting. Debe permanecer en false hasta la semana 3, en la cual har√° la implementaci√≥n de esta funcionalidad.\n\n**Informaci√≥n retornada:**\n\n- `question`: La pregunta original\n- `answer`: Respuesta generada por el sistema RAG\n- `collection`: Colecci√≥n utilizada para la answer\n- `files_consulted`: Lista de archivos consultados\n- `context_docs`: Documentos espec√≠ficos usados como contexto\n- `reranker_used`: Indica si se aplic√≥ reranking\n- `query_rewriting_used`: Indica si se aplic√≥ query rewritting\n- `response_time_sec`: Tiempo de procesamiento en segundos"
					},
					"response": [
						{
							"name": "Consulta Exitosa",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"question\": \"Crea un resumen del documento\",\n    \"top_k\": 5,\n    \"collection\": \"test_collection\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ask",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ask"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"question\": \"Crea un resumen del documento X\",\n    \"answer\": \"El documento X se trata sobre los t√©rminos y condiciones de un contrato de servicios profesionales. Incluye cl√°usulas sobre responsabilidades, pagos, duraci√≥n del contrato y t√©rminos de terminaci√≥n. El contrato establece que el proveedor debe cumplir con est√°ndares espec√≠ficos de calidad y entregar los servicios en los plazos acordados.\",\n    \"collection\": \"test_collection\",\n    \"files_consulted\": [\"Documento_1.txt\", \"Documento_2.pdf\"],\n    \"context_docs\": [\n        {\n            \"file_name\": \"Documento_1.txt\",\n            \"page_number\": 9,\n            \"chunk_type\": \"content\",\n            \"priority\": \"high\",\n            \"snippet\": \"El presente contrato establece los t√©rminos y condiciones bajo los cuales el proveedor prestar√° servicios profesionales al cliente. Las responsabilidades incluyen la entrega oportuna de servicios de calidad seg√∫n los est√°ndares acordados.\"\n        }\n    ],\n    \"reranker_used\": false,\n    \"response_time_sec\": 4.25,\n    \"improved_prompt\": \"Bas√°ndose en los documentos proporcionados, crea un resumen comprehensivo que incluya los puntos principales y aspectos m√°s relevantes del contenido.\"\n}"
						},
						{
							"name": "Error - Pregunta Vac√≠a",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"question\": \"\",\n    \"collection\": \"test_collection\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ask",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ask"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"La question es requerida y no puede estar vac√≠a\"\n}"
						},
						{
							"name": "Error - Sin Colecciones",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"question\": \"¬øQu√© informaci√≥n contienen los documentos?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ask",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ask"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"No hay colecciones disponibles. Crea una colecci√≥n en la pesta√±a Cargar Documentos\"\n}"
						},
						{
							"name": "Error - Colecci√≥n No Existe",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"question\": \"¬øQu√© informaci√≥n contienen los documentos?\",\n    \"collection\": \"coleccion_inexistente\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ask",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ask"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Colecci√≥n coleccion_inexistente no disponible. Disponibles: contratos, resumenes\"\n}"
						},
						{
							"name": "Error - Procesamiento Interno",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"question\": \"Pregunta que causa error interno\",\n    \"collection\": \"test_collection\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ask",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ask"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Error procesando la question: ValueError: Could not find any relevant documents for the given query.\"\n}"
						}
					]
				}
			],
			"description": "Endpoints para realizar consultas inteligentes usando RAG sobre documentos cargados"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global pre-request para toda la colecci√≥n",
					"console.log('üöÄ Ejecutando endpoint:', pm.info.requestName);",
					"",
					"// Configurar headers comunes",
					"pm.request.headers.add({",
					"    key: 'User-Agent',",
					"    value: 'MISW-4411-Postman-Collection/2.0.0'",
					"});",
					"",
					"// Validar que baseUrl est√© configurado",
					"if (!pm.collectionVariables.get('baseUrl')) {",
					"    pm.collectionVariables.set('baseUrl', 'http://localhost:8000');",
					"    console.warn('‚ö†Ô∏è baseUrl no configurado, usando valor por defecto');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Tests globales para toda la colecci√≥n",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000);",
					"});",
					"",
					"pm.test('Response has valid JSON structure', function () {",
					"    try {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.be.an('object');",
					"    } catch (e) {",
					"        // Para endpoints que no devuelven JSON, skip este test",
					"        pm.test.skip();",
					"    }",
					"});",
					"",
					"// Log de resultados para documentaci√≥n",
					"console.log('‚úÖ Endpoint completado:', pm.info.requestName);",
					"console.log('üìä Status:', pm.response.status);",
					"console.log('‚è±Ô∏è Tiempo answer:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "processing_id",
			"value": "processing_id",
			"type": "string"
		},
		{
			"key": "test_collection_name",
			"value": "test_collection",
			"type": "string"
		},
		{
			"key": "test_source_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "max_response_time_ms",
			"value": "30000",
			"type": "string"
		},
		{
			"key": "test_execution_timestamp",
			"value": "",
			"type": "string"
		},
		{
			"key": "download_dir",
			"value": "./docs",
			"type": "string"
		},
		{
			"key": "log_dir",
			"value": "./logs",
			"type": "string"
		}
	]
}